//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//

#ifndef RIAPS_CORE_RECORDER_H
#define RIAPS_CORE_RECORDER_H

#include "componentmodel/r_componentbase.h"
#include "ReqAddr.capnp.h"
#include "RepAddr.capnp.h"

// Name of the ports from the model file
#define PORT_REQ_CONTRACTADDR "contractAddr"
#define PORT_TIMER_POLLER "poller"

namespace transactiveenergy {
   namespace components {
      
      class RecorderBase : public riaps::ComponentBase {
         
         public:
         RecorderBase(_component_conf &config, riaps::Actor &actor);
         
         bool SendContractAddr(capnp::MallocMessageBuilder&    messageBuilder,
         ReqAddr::Builder& message);
         
         bool RecvContractAddr(RepAddr::Reader &message);
         
         virtual void OnPoller(riaps::ports::PortBase *port)=0;
         
         virtual ~RecorderBase();
         protected:
         virtual void DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params=nullptr );
         virtual void DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port);
      };
   }
}
#endif //RIAPS_CORE_RECORDER_H
