
# model's name
MODEL = $(shell grep 'MODEL[ ]*=[ ]*.*' ./Makefile | grep -o '[RG].*')


# Script to customize the GLM model
create_attack = config_model_attack.py

DIR=$(shell pwd)/

# model's folders
TAXONOMY_DIR = Taxonomy_feeders
TAXONOMY_NEW_DIR = modified_taxonomy

MODEL_DIR = $(DIR)/$(TAXONOMY_NEW_DIR)/$(MODEL)

# GLM files
ORIGINAL_GLM = $(DIR)/$(TAXONOMY_DIR)/$(MODEL).glm
NEW_GLM = $(MODEL_DIR)/$(MODEL)_custom.glm
ATT_GLM = $(MODEL_DIR)/$(MODEL)_attack.glm

# simulation's folder
SIM_DIR = simulations

SIM_ATT_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/attack
SIM_NOM_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/nominal
SIM_NOM_TEST_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/nominal_test
SIM_DELAY_ATT_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/delay_attack
SIM_IDEAL_DELAY_ATT_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/delay_attack_ideal
SIM_DYN_DELAY_ATT_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/delay_attack_dyn

SIM_1_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/attack_1
SIM_2_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/attack_2
SIM_NORMAL_DIR = $(DIR)/$(SIM_DIR)/$(MODEL)/normal_bc

port=$(shell port=6267; \
	while [ "$$port" -lt "65535" ]; do \
		gld_clk=$$(wget http://localhost:$$port/raw/clock -q -O - ); \
		if [ -z "$$gld_clk" ]; then \
			echo "$$port"; \
			break ; \
		else \
			port=$$( echo "($$port + 1)" | bc -l ) ; \
		fi ; \
	done  \
)

options=$(port)


# Simulate the system without attacks
simulate_nominal:
	cp ./events_attack/events_att_nominal ./events_att
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_NOM_DIR)
	mv $(SIM_ATT_DIR) $(SIM_NOM_DIR)


# simulate the system with the external function that calculates the market's equilibria
simulate_nominal_ext:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	cp ./events_attack/events_att_nominal_ext ./events_att
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_NOM_TEST_DIR)
	mv $(SIM_ATT_DIR) $(SIM_NOM_TEST_DIR)
	cp bids_log.csv $(SIM_NOM_TEST_DIR)
	cp bids_log_nom.csv $(SIM_NOM_TEST_DIR)
	#mv bids_log.csv ./records/bids_log.csv
	#mv bids_log_nom.csv ./records/bids_log.csv


# Simlate delay attacks using an external function
simulate_attack_ext:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	cp ./events_attack/events_att_ext ./events_att
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_DELAY_ATT_DIR)
	mv $(SIM_ATT_DIR) $(SIM_DELAY_ATT_DIR)
	cp bids_log.csv $(SIM_DELAY_ATT_DIR)
	cp bids_log_nom.csv $(SIM_DELAY_ATT_DIR)
	#mv bids_log.csv ./records/bids_log_att.csv


# Simlate delay attacks using an external function
simulate_ideal_attack_ext:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	cp ./events_attack/bids_header.csv bids_log_att.csv
	cp ./events_attack/events_ideal_att_ext ./events_att
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_IDEAL_DELAY_ATT_DIR)
	mv $(SIM_ATT_DIR) $(SIM_IDEAL_DELAY_ATT_DIR)
	#cp bids_log.csv $(SIM_IDEAL_DELAY_ATT_DIR)
	cp bids_log_nom.csv $(SIM_IDEAL_DELAY_ATT_DIR)
	cp bids_log_att.csv $(SIM_IDEAL_DELAY_ATT_DIR)/bids_log.csv
	#mv bids_log.csv ./records/bids_log_att.csv



# Simlate delay attacks using an external function
simulate_dyn_attack_ext:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	#cp ./events_attack/bids_header.csv bids_log_att.csv
	cp ./events_attack/events_dyn_att_ext ./events_att
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_DYN_DELAY_ATT_DIR)
	mv $(SIM_ATT_DIR) $(SIM_DYN_DELAY_ATT_DIR)
	cp bids_log.csv $(SIM_DYN_DELAY_ATT_DIR)
	cp bids_log_nom.csv $(SIM_DYN_DELAY_ATT_DIR)
	#cp bids_log_att.csv $(SIM_DYN_DELAY_ATT_DIR)/bids_log.csv
	#mv bids_log.csv ./records/bids_log_att.csv

simulate_0:
	cp ./events_attack/bids_header.csv bids.csv
	rm -f bids_log.csv eq_price.csv
	cp ./events_attack/events_bc_nominal ./events_att

	$(MAKE) -s -f ./Makefile custom
	python3  $(create_attack) -i  $(NEW_GLM) -o $(ATT_GLM)
	${MAKE} -s -f ./Makefile.attack list_objects_att

	grep -io '[^\w_]bidder_control_.*' list_gl_objects > bidders
	grep -io '[^\w_]block_nom_.*' list_gl_objects >> bidders 
	echo 'unresp_bidder_nom' >> bidders 
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_NOM_TEST_DIR)
	mv $(SIM_ATT_DIR) $(SIM_NOM_TEST_DIR)
	mv bids_log.csv ./records/bids_log.csv


simulate_1:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	cp ./events_attack/bids_header.csv bids_log_att.csv
	cp ./events_attack/events_1 ./events_att
	$(MAKE) -s -f ./Makefile custom
	python3  $(create_attack) -i  $(NEW_GLM) -o $(ATT_GLM)
	${MAKE} -s -f ./Makefile.attack list_objects_att
	grep -io '[^\w_]bidder_control_.*' list_gl_objects > bidders
	grep -io '[^\w_]block_nom_.*' list_gl_objects >> bidders 
	echo 'unresp_bidder_nom' >> bidders 
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_1_DIR)
	mv $(SIM_ATT_DIR) $(SIM_1_DIR)
	cp bids_log_att.csv $(SIM_1_DIR)
	cp bids_log_nom.csv $(SIM_1_DIR)

simulate_2:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	cp ./events_attack/bids_header.csv bids_log_att.csv
	cp ./events_attack/events_2 ./events_att
	$(MAKE) -s -f ./Makefile custom
	python3  $(create_attack) -i  $(NEW_GLM) -o $(ATT_GLM)
	${MAKE} -s -f ./Makefile.attack list_objects_att
	grep -io '[^\w_]bidder_control_.*' list_gl_objects > bidders
	grep -io '[^\w_]block_nom_.*' list_gl_objects >> bidders 
	echo 'unresp_bidder_nom' >> bidders 
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_2_DIR)
	mv $(SIM_ATT_DIR) $(SIM_2_DIR)
	cp bids_log_att.csv $(SIM_2_DIR)
	cp bids_log_nom.csv $(SIM_2_DIR)


simulate_bc_no_attack:
	cp ./events_attack/bids_header.csv bids.csv
	cp ./events_attack/bids_header.csv bids_log_nom.csv
	cp ./events_attack/bids_header.csv bids_log_att.csv
	cp ./events_attack/events_normal ./events_att
	$(MAKE) -s -f ./Makefile custom
	python3  $(create_attack) -i  $(NEW_GLM) -o $(ATT_GLM)
	${MAKE} -s -f ./Makefile.attack list_objects_att
	grep -io '[^\w_]bidder_control_.*' list_gl_objects > bidders
	grep -io '[^\w_]block_nom_.*' list_gl_objects >> bidders 
	echo 'unresp_bidder_nom' >> bidders 
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_2_DIR)
	mv $(SIM_ATT_DIR) $(SIM_NORMAL_DIR)
	cp bids_log_att.csv $(SIM_NORMAL_DIR)
	cp bids_log_nom.csv $(SIM_NORMAL_DIR)

# simulate the system using the events_att file, which is configures in other rules
simulate:
	$(MAKE) -s -f ./Makefile custom
	python3  $(create_attack) -i  $(NEW_GLM) -o $(ATT_GLM)
	sed -i 's/current_price_mean_[0-9]*h/current_price_mean_1h/g' $(ATT_GLM)
	sed -i 's/current_price_stdev_[0-9]*h/current_price_stdev_1h/g' $(ATT_GLM)
	${MAKE} -s -f ./Makefile.attack list_objects_att
	cp events_att $(DIR)/events
	if [ ! -d $(SIM_ATT_DIR) ]; then mkdir -p $(SIM_ATT_DIR); fi
	options=$(port)
	# python event_manager.py --port $(port) &
	sh run_gridlab.sh $(ATT_GLM) $(SIM_ATT_DIR) $(options) &
	python3 event_manager.py --port $(port) 


# Simlate delay attacks defined in form of events
simulate_attack:
	cat ./events_attack/events_att_nominal ./delay_attacks/plot-scripts/events_delay_att > ./events_att
	$(MAKE) -s -f ./Makefile.attack simulate
	rm -rf $(SIM_DELAY_ATT_DIR)
	mv $(SIM_ATT_DIR) $(SIM_DELAY_ATT_DIR)


list_objects_att: $(ATT_GLM)
	grep '^\s*name' $(ATT_GLM) | sed 's/[ ]*name//' | sed 's/;//' > list_gl_objects






.SILENT: all multiple_attack simulate_attack ${intensity_sims} list_objects_att attack_nominal







